#include <iostream>
#include <vector>

// Use directives to avoid writing std:: repeatedly
using std::vector;
using std::cout;
using std::endl;

class Queue {
private:
    vector<int> queue;

public:
    // Enqueue function to add an element to the queue
    void enqueue(int item) {
        queue.push_back(item);
        cout << "Enqueued: " << item << endl;
    }

    // Dequeue function to remove an element from the queue
    void dequeue() {
        if (!is_empty()) {
            int item = queue.front();
            queue.erase(queue.begin());
            cout << "Dequeued: " << item << endl;
        } else {
            cout << "Queue is empty" << endl;
        }
    }

    // Function to check if the queue is empty
    bool is_empty() const {
        return queue.empty();
    }

    // Function to get the current size of the queue
    int size() const {
        return queue.size();
    }
};

int main() {
    Queue q;
    q.enqueue(1);
    q.enqueue(2);
    q.enqueue(3);
    cout << "Queue size: " << q.size() << endl;
    q.dequeue();
    q.dequeue();
    q.dequeue();
    q.dequeue();  // This will print "Queue is empty"

    return 0;
}
